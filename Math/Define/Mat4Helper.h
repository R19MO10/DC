/**
* Mat4Helper.h
*/
#ifndef MAT4HELPER_H_INCLUDED
#define MAT4HELPER_H_INCLUDED
#include "Mat4Math.h"

/**
* 線形補間
* 
* @param m1 1つめの行列
* @param m2 2つめの行列
* @param ratio 混合割合(0.0：m1が返される, 1.0：m2が返される)
* 
* @return 線形補間された行列
*/
inline mat4 lerp(const mat4& m1, const mat4& m2, float ratio) {
	return m1 * (1.0f - ratio) + m2 * ratio;
}

// 転置行列
inline mat4 transpose(const mat4& m)
{
	mat4 t;

	t[0][0] = m[0][0];
	t[0][1] = m[1][0];
	t[0][2] = m[2][0];
	t[0][3] = m[3][0];

	t[1][0] = m[0][1];
	t[1][1] = m[1][1];
	t[1][2] = m[2][1];
	t[1][3] = m[3][1];

	t[2][0] = m[0][2];
	t[2][1] = m[1][2];
	t[2][2] = m[2][2];
	t[2][3] = m[3][2];

	t[3][0] = m[0][3];
	t[3][1] = m[1][3];
	t[3][2] = m[2][3];
	t[3][3] = m[3][3];

	return t;
}

// 逆行列
inline mat4 inverse(const mat4& m)
{
	// 余因子行列を計算
	mat4 adjugate;

	// 0行目
	adjugate[0][0] =
		m[1][1] * m[2][2] * m[3][3] + m[1][2] * m[2][3] * m[3][1] + m[1][3] * m[2][1] * m[3][2]
		- m[3][1] * m[2][2] * m[1][3] - m[3][2] * m[2][3] * m[1][1] - m[3][3] * m[2][1] * m[1][2];

	adjugate[0][1] = -(
		m[1][0] * m[2][2] * m[3][3] + m[1][2] * m[2][3] * m[3][0] + m[1][3] * m[2][0] * m[3][2]
		- m[3][0] * m[2][2] * m[1][3] - m[3][2] * m[2][3] * m[1][0] - m[3][3] * m[2][0] * m[1][2]);

	adjugate[0][2] =
		m[1][0] * m[2][1] * m[3][3] + m[1][1] * m[2][3] * m[3][0] + m[1][3] * m[2][0] * m[3][1]
		- m[3][0] * m[2][1] * m[1][3] - m[3][1] * m[2][3] * m[1][0] - m[3][3] * m[2][0] * m[1][1];

	adjugate[0][3] = -(
		m[1][0] * m[2][1] * m[3][2] + m[1][1] * m[2][2] * m[3][0] + m[1][2] * m[2][0] * m[3][1]
		- m[3][0] * m[2][1] * m[1][2] - m[3][1] * m[2][2] * m[1][0] - m[3][2] * m[2][0] * m[1][1]);

	// 1行目
	adjugate[1][0] = -(
		m[0][1] * m[2][2] * m[3][3] + m[0][2] * m[2][3] * m[3][1] + m[0][3] * m[2][1] * m[3][2]
		- m[3][1] * m[2][2] * m[0][3] - m[3][2] * m[2][3] * m[0][1] - m[3][3] * m[2][1] * m[0][2]);

	adjugate[1][1] =
		m[0][0] * m[2][2] * m[3][3] + m[0][2] * m[2][3] * m[3][0] + m[0][3] * m[2][0] * m[3][2]
		- m[3][0] * m[2][2] * m[0][3] - m[3][2] * m[2][3] * m[0][0] - m[3][3] * m[2][0] * m[0][2];

	adjugate[1][2] = -(
		m[0][0] * m[2][1] * m[3][3] + m[0][1] * m[2][3] * m[3][0] + m[0][3] * m[2][0] * m[3][1]
		- m[3][0] * m[2][1] * m[0][3] - m[3][1] * m[2][3] * m[0][0] - m[3][3] * m[2][0] * m[0][1]);

	adjugate[1][3] =
		m[0][0] * m[2][1] * m[3][2] + m[0][1] * m[2][2] * m[3][0] + m[0][2] * m[2][0] * m[3][1]
		- m[3][0] * m[2][1] * m[0][2] - m[3][1] * m[2][2] * m[0][0] - m[3][2] * m[2][0] * m[0][1];


	// 2行目
	adjugate[2][0] =
		m[0][1] * m[1][2] * m[3][3] + m[0][2] * m[1][3] * m[3][1] + m[0][3] * m[1][1] * m[3][2]
		- m[3][1] * m[1][2] * m[0][3] - m[3][2] * m[1][3] * m[0][1] - m[3][3] * m[1][1] * m[0][2];

	adjugate[2][1] = -(
		m[0][0] * m[1][2] * m[3][3] + m[0][2] * m[1][3] * m[3][0] + m[0][3] * m[1][0] * m[3][2]
		- m[3][0] * m[1][2] * m[0][3] - m[3][2] * m[1][3] * m[0][0] - m[3][3] * m[1][0] * m[0][2]);

	adjugate[2][2] =
		m[0][0] * m[1][1] * m[3][3] + m[0][1] * m[1][3] * m[3][0] + m[0][3] * m[1][0] * m[3][1]
		- m[3][0] * m[1][1] * m[0][3] - m[3][1] * m[1][3] * m[0][0] - m[3][3] * m[1][0] * m[0][1];

	adjugate[2][3] = -(
		m[0][0] * m[1][1] * m[3][2] + m[0][1] * m[1][2] * m[3][0] + m[0][2] * m[1][0] * m[3][1]
		- m[3][0] * m[1][1] * m[0][2] - m[3][1] * m[1][2] * m[0][0] - m[3][2] * m[1][0] * m[0][1]);


	// 3行目
	adjugate[3][0] = -(
		m[0][1] * m[1][2] * m[2][3] + m[0][2] * m[1][3] * m[2][1] + m[0][3] * m[1][1] * m[2][2]
		- m[2][1] * m[1][2] * m[0][3] - m[2][2] * m[1][3] * m[0][1] - m[2][3] * m[1][1] * m[0][2]);

	adjugate[3][1] =
		m[0][0] * m[1][2] * m[2][3] + m[0][2] * m[1][3] * m[2][0] + m[0][3] * m[1][0] * m[2][2]
		- m[2][0] * m[1][2] * m[0][3] - m[2][2] * m[1][3] * m[0][0] - m[2][3] * m[1][0] * m[0][2];

	adjugate[3][2] = -(
		m[0][0] * m[1][1] * m[2][3] + m[0][1] * m[1][3] * m[2][0] + m[0][3] * m[1][0] * m[2][1]
		- m[2][0] * m[1][1] * m[0][3] - m[2][1] * m[1][3] * m[0][0] - m[2][3] * m[1][0] * m[0][1]);

	adjugate[3][3] =
		m[0][0] * m[1][1] * m[2][2] + m[0][1] * m[1][2] * m[2][0] + m[0][2] * m[1][0] * m[2][1]
		- m[2][0] * m[1][1] * m[0][2] - m[2][1] * m[1][2] * m[0][0] - m[2][2] * m[1][0] * m[0][1];


	// 行列式を計算
	const float det =
		m[0][0] * adjugate[0][0] + m[0][1] * adjugate[1][0] + 
		m[0][2] * adjugate[2][0] + m[0][3] * adjugate[3][0];

	// 行列式の逆数を掛ける
	const float invDet = 1.0f / det;
	adjugate[0] *= invDet;
	adjugate[1] *= invDet;
	adjugate[2] *= invDet;
	adjugate[3] *= invDet;

	return adjugate;
}

#endif // MAT4HELPER_H_INCLUDED
